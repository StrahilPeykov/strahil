{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\r\nimport readingTime from 'reading-time'\r\n\r\nexport const CaseStudy = defineDocumentType(() => ({\r\n  name: 'CaseStudy',\r\n  filePathPattern: `work/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    description: { type: 'string', required: true },\r\n    date: { type: 'date', required: true },\r\n    tags: { type: 'list', of: { type: 'string' }, required: true },\r\n    featured: { type: 'boolean', default: false },\r\n    image: { type: 'string', required: false },\r\n    client: { type: 'string', required: false },\r\n    role: { type: 'string', required: false },\r\n    duration: { type: 'string', required: false },\r\n    // New SEO fields\r\n    seoTitle: { type: 'string', required: false },\r\n    seoDescription: { type: 'string', required: false },\r\n    canonicalUrl: { type: 'string', required: false },\r\n    author: { type: 'string', default: 'Strahil Peykov' },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (post) => `/${post._raw.flattenedPath}`,\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (post) => post._raw.flattenedPath.split('/').slice(1).join('/'),\r\n    },\r\n    readingTime: {\r\n      type: 'json',\r\n      resolve: (post) => readingTime(post.body.raw),\r\n    },\r\n  },\r\n}))\r\n\r\nexport const Note = defineDocumentType(() => ({\r\n  name: 'Note',\r\n  filePathPattern: `ideas/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    description: { type: 'string', required: true },\r\n    date: { type: 'date', required: true },\r\n    updated: { type: 'date', required: false },\r\n    tags: { type: 'list', of: { type: 'string' }, required: true },\r\n    draft: { type: 'boolean', default: false },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (post) => `/${post._raw.flattenedPath}`,\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (post) => post._raw.flattenedPath.split('/').slice(1).join('/'),\r\n    },\r\n    readingTime: {\r\n      type: 'json',\r\n      resolve: (post) => readingTime(post.body.raw),\r\n    },\r\n  },\r\n}))\r\n\r\nexport const LibraryNote = defineDocumentType(() => ({\r\n  name: 'LibraryNote',\r\n  filePathPattern: `library/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    description: { type: 'string', required: true },\r\n    date: { type: 'date', required: true },\r\n    course: { type: 'string', required: false },\r\n    university: { type: 'string', required: false },\r\n    tags: { type: 'list', of: { type: 'string' }, required: true },\r\n  },\r\n  computedFields: {\r\n    url: {\r\n      type: 'string',\r\n      resolve: (post) => `/${post._raw.flattenedPath}`,\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (post) => post._raw.flattenedPath.split('/').slice(1).join('/'),\r\n    },\r\n  },\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: './content',\r\n  documentTypes: [CaseStudy, Note, LibraryNote],\r\n  mdx: {\r\n    remarkPlugins: [],\r\n    rehypePlugins: [],\r\n  },\r\n})"],
  "mappings": "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",
  "names": []
}
